import React, { useState, useEffect, useCallback } from 'react';
import { jsPDF } from 'jspdf';
import {
  Box,
  Button,
  Container,
  Flex,
  Heading,
  Text,
  SimpleGrid,
  Table,
  Thead,
  Tbody,
  Tr,
  Th,
  Td,
  Select,
  HStack,
  Spinner,
  Badge,
  Card,
  CardBody,
  CardHeader,
  Stack,
  useToast,
  useColorModeValue,
  Icon,
} from '@chakra-ui/react';
import { 
  FaFilePdf
} from 'react-icons/fa';
import { 
  CheckCircleIcon, 
  CalendarIcon, 
  WarningIcon 
} from '@chakra-ui/icons';
import financialService from '../../services/financial.service';
import type { Pharmacy } from '../../types/pharmacy.types';
import type { Payment } from '../../types/financial.types';
import DashboardLayout from '../../components/layout/DashboardLayout';

interface CertificateData {
  pharmacyId: string;
  issueDate: Date;
  validUntil: Date;
  certificateNumber: string;
  pharmacy: Pharmacy;
  clearedDues: string[];
  totalAmountPaid: number;
}

const ClearanceCertificateGeneration: React.FC = () => {
  const toast = useToast();
  const [loading, setLoading] = useState<boolean>(true);
  const [generating, setGenerating] = useState<boolean>(false);
  const [pharmacies, setPharmacies] = useState<Pharmacy[]>([]);
  const [eligiblePharmacies, setEligiblePharmacies] = useState<Pharmacy[]>([]);
  const [ineligiblePharmacies, setIneligiblePharmacies] = useState<Pharmacy[]>([]);
  const [selectedPharmacy, setSelectedPharmacy] = useState<string>('');
  const [currentYear] = useState<number>(new Date().getFullYear());
  const [filterStatus, setFilterStatus] = useState<string>('all');
  
  // Color mode values
  const cardBg = useColorModeValue('white', 'gray.700');
  const borderColor = useColorModeValue('gray.200', 'gray.600');
  const hoverBg = useColorModeValue('gray.50', 'gray.600');

  // Calculate valid until date (December 31st of current year)
  const validUntil = new Date(currentYear, 11, 31);

  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      
      // Fetch all pharmacies
      const allPharmacies = await financialService.getAllPharmacies();
      setPharmacies(allPharmacies);

      // Check for dues to determine eligibility
      const duesPromises = allPharmacies.map(async (pharmacy) => {
        try {          const eligibility = await financialService.checkClearanceEligibility(pharmacy._id);
          return {
            pharmacy,
            eligible: eligibility.isEligible,
          };
        } catch (err) {
          console.error(`Failed to check eligibility for ${pharmacy.name}:`, err);
          return {
            pharmacy,
            eligible: false,
          };
        }
      });

      const eligibilityResults = await Promise.all(duesPromises);
      
      const eligible = eligibilityResults
        .filter((result) => result.eligible)
        .map((result) => result.pharmacy);
      
      const ineligible = eligibilityResults
        .filter((result) => !result.eligible)
        .map((result) => result.pharmacy);
      
      setEligiblePharmacies(eligible);
      setIneligiblePharmacies(ineligible);
    } catch (err) {
      console.error('Failed to load pharmacy data:', err);
      toast({
        title: 'Error',
        description: 'Failed to load pharmacy data',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setLoading(false);
    }
  }, [currentYear, toast]);

  useEffect(() => {
    fetchData();
  }, [fetchData]);

  const generateCertificateNumber = (): string => {
    // This is a mock function for the frontend preview
    // The real certificate number will be generated by the backend
    // In a 4-digit format like ACPN-0001
    const random = Math.floor(Math.random() * 10000)
      .toString()
      .padStart(4, '0');
    return `ACPN-${random}`;
  };

  const generateCertificatePDF = async (pharmacy: Pharmacy): Promise<void> => {
    try {
      setGenerating(true);

      // Get pharmacy payments to calculate total paid
      const paymentsRes = await financialService.getAllPayments({
        status: 'all',
      });
      const pharmacyPayments = paymentsRes.payments.filter(
        (payment: Payment) =>
          payment.pharmacyId === pharmacy._id &&
          (payment.status === 'approved' ||
            payment.approvalStatus === 'approved') &&
          new Date(payment.paymentDate || '').getFullYear() === currentYear
      );

      const totalPaid = pharmacyPayments.reduce(
        (sum: number, payment: Payment) => sum + payment.amount,
        0
      );

      const certificateData: CertificateData = {
        pharmacyId: pharmacy._id,
        issueDate: new Date(),
        validUntil: validUntil,
        certificateNumber: generateCertificateNumber(),
        pharmacy: pharmacy,
        clearedDues: [], // We'll use payments instead
        totalAmountPaid: totalPaid,
      };

      // Create PDF
      const pdf = new jsPDF({
        orientation: 'portrait',
        unit: 'mm',
        format: 'a4',
      });

      // Set up colors
      const primaryColor = [54, 162, 235] as [number, number, number]; // Blue
      const secondaryColor = [75, 192, 192] as [number, number, number]; // Teal
      const textColor = [33, 37, 41] as [number, number, number]; // Dark gray

      // Header
      pdf.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
      pdf.rect(0, 0, 210, 40, 'F');

      // Logo placeholder and title
      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(24);
      pdf.setFont('helvetica', 'bold');
      pdf.text('ACPN OTA ZONE', 105, 15, { align: 'center' });

      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'normal');
      pdf.text('CLEARANCE CERTIFICATE', 105, 25, { align: 'center' });

      pdf.setFontSize(12);
      pdf.text('Association of Community Pharmacists of Nigeria', 105, 32, {
        align: 'center',
      });

      // Certificate content
      pdf.setTextColor(textColor[0], textColor[1], textColor[2]);
      pdf.setFontSize(14);
      pdf.setFont('helvetica', 'bold');
      pdf.text('CERTIFICATE OF FINANCIAL CLEARANCE', 105, 55, {
        align: 'center',
      });

      // Certificate number and date
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Certificate No: ${certificateData.certificateNumber}`, 20, 70);
      pdf.text(
        `Issue Date: ${certificateData.issueDate.toLocaleDateString()}`,
        20,
        75
      );
      pdf.text(
        `Valid Until: ${certificateData.validUntil.toLocaleDateString()}`,
        20,
        80
      );

      // Main content
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');

      const mainText = `This is to certify that ${
        pharmacy.name
      } located at ${
        pharmacy.address
      } has fulfilled all financial obligations to the Association of Community Pharmacists of Nigeria, Ota Zone, for the year ${currentYear}.`;

      // Add text with word wrapping
      const splitText = pdf.splitTextToSize(mainText, 170);
      pdf.text(splitText, 20, 100);

      // Payment details
      pdf.setFontSize(11);
      pdf.setFont('helvetica', 'bold');
      pdf.text('Payment Details:', 20, 130);

      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(`Total Amount Paid: â‚¦${totalPaid.toLocaleString()}`, 20, 140);
      pdf.text(`Payment Status: CLEARED`, 20, 147);

      // Border
      pdf.setDrawColor(...secondaryColor);
      pdf.setLineWidth(0.5);
      pdf.rect(10, 50, 190, 200);

      // Footer
      pdf.setFillColor(primaryColor[0], primaryColor[1], primaryColor[2]);
      pdf.rect(0, 260, 210, 20, 'F');

      pdf.setTextColor(255, 255, 255);
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      pdf.text(
        'This certificate is valid until December 31st of the issue year.',
        105,
        265,
        { align: 'center' }
      );
      pdf.text(
        'For verification, contact ACPN Ota Zone at info@acpnota.org',
        105,
        270,
        { align: 'center' }
      );

      // Signature line
      pdf.setTextColor(...textColor);
      pdf.line(130, 220, 180, 220);
      pdf.text('Financial Secretary', 155, 230, { align: 'center' });
      pdf.text('ACPN Ota Zone', 155, 235, { align: 'center' });

      // Watermark
      pdf.setTextColor(200, 200, 200);
      pdf.setFontSize(50);
      pdf.text('CLEARED', 105, 150, {
        align: 'center',
        angle: 45,
        renderingMode: 'stroke',
      });

      // Save the PDF
      const fileName = `clearance-certificate-${pharmacy.name.replace(
        /[^a-zA-Z0-9]/g,
        '-'
      )}-${currentYear}.pdf`;
      pdf.save(fileName);

      toast({
        title: 'Success',
        description: `Certificate generated successfully for ${pharmacy.name}`,
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
    } catch (err: unknown) {
      console.error('Failed to generate certificate:', err);
      toast({
        title: 'Error',
        description: 'Failed to generate certificate',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setGenerating(false);
    }
  };

  const generateBulkCertificates = async () => {
    try {
      setGenerating(true);
      
      for (const pharmacy of eligiblePharmacies) {
        await generateCertificatePDF(pharmacy);
        // Small delay between generations to prevent overwhelming
        await new Promise((resolve) => setTimeout(resolve, 100));
      }

      toast({
        title: 'Success',
        description: `Generated certificates for ${eligiblePharmacies.length} pharmacies`,
        status: 'success',
        duration: 5000,
        isClosable: true,
      });
    } catch (err: unknown) {
      console.error('Failed to generate bulk certificates:', err);
      toast({
        title: 'Error',
        description: 'Failed to generate bulk certificates',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
    } finally {
      setGenerating(false);
    }
  };

  const handleSingleGeneration = async () => {
    if (!selectedPharmacy) {
      toast({
        title: 'Error',
        description: 'Please select a pharmacy',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
      return;
    }

    const pharmacy = pharmacies.find((p) => p._id === selectedPharmacy);
    if (!pharmacy) {
      toast({
        title: 'Error',
        description: 'Pharmacy not found',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
      return;
    }

    // Check if pharmacy is eligible
    const isEligible = eligiblePharmacies.some(
      (p) => p._id === selectedPharmacy
    );
    if (!isEligible) {
      toast({
        title: 'Error',
        description: 'This pharmacy has outstanding dues and is not eligible for clearance certificate',
        status: 'error',
        duration: 5000,
        isClosable: true,
      });
      return;
    }

    await generateCertificatePDF(pharmacy);
  };  if (loading) {
    return (
      <DashboardLayout>
        <Flex direction="column" align="center" width="100%">
          <Container maxW="container.xl" p={{ base: 4, md: 6 }} width="100%">
            <Flex justify="center" align="center" width="100%" minH="50vh">
              <Spinner size="xl" thickness="4px" color="blue.600" />
            </Flex>
          </Container>
        </Flex>
      </DashboardLayout>
    );
  }

  const filterPharmacies = () => {
    if (filterStatus === 'eligible') {
      return eligiblePharmacies;
    } else if (filterStatus === 'ineligible') {
      return ineligiblePharmacies;
    }
    return pharmacies;
  };
  const filteredPharmaciesList = filterPharmacies();  return (
    <DashboardLayout>
      <Flex direction="column" align="center" width="100%">
        <Container maxW="container.xl" p={{ base: 4, md: 6 }} width="100%">
          <Box mb={{ base: 4, md: 6 }} textAlign="left" width="100%">
            <Heading as="h1" size="xl" fontWeight="bold">
              Clearance Certificate Generation
            </Heading>
            <Text color="gray.600" mt={2}>
              Generate clearance certificates for pharmacies with no outstanding dues
            </Text>
          </Box>
            {/* Summary Stats */}
          <SimpleGrid columns={{ base: 1, md: 3 }} spacing={{ base: 4, md: 6 }} mb={{ base: 6, md: 8 }} w="100%">
            <Card bg={cardBg} shadow="md" borderRadius="lg" overflow="hidden">
              <CardBody>
                <Flex alignItems="center">
                  <Box p={3} bg="green.100" borderRadius="lg">
                    <Icon as={CheckCircleIcon} w={8} h={8} color="green.600" />
                  </Box>
                  <Box ml={4}>
                    <Text fontSize="2xl" fontWeight="bold">
                      {eligiblePharmacies.length}
                    </Text>
                    <Text color="gray.600">Eligible Pharmacies</Text>
                  </Box>
                </Flex>
              </CardBody>
            </Card>            <Card bg={cardBg} shadow="md" borderRadius="lg" overflow="hidden">
              <CardBody>
                <Flex alignItems="center">
                  <Box p={3} bg="red.100" borderRadius="lg">
                    <Icon as={WarningIcon} w={8} h={8} color="red.600" />
                  </Box>
                  <Box ml={4}>
                    <Text fontSize="2xl" fontWeight="bold">
                      {ineligiblePharmacies.length}
                    </Text>
                    <Text color="gray.600">Ineligible Pharmacies</Text>
                  </Box>
                </Flex>
              </CardBody>
            </Card>            <Card bg={cardBg} shadow="md" borderRadius="lg" overflow="hidden">
              <CardBody>
                <Flex alignItems="center">
                  <Box p={3} bg="blue.100" borderRadius="lg">
                    <Icon as={CalendarIcon} w={8} h={8} color="blue.600" />
                  </Box>
                  <Box ml={4}>
                    <Text fontSize="2xl" fontWeight="bold">
                      {validUntil.toLocaleDateString()}
                    </Text>
                    <Text color="gray.600">Certificate Valid Until</Text>
                  </Box>
                </Flex>
              </CardBody>
            </Card></SimpleGrid>
            {/* Generation Options */}
          <Card bg={cardBg} shadow="md" mb={{ base: 6, md: 8 }} w="100%" borderRadius="lg" overflow="hidden">
            <CardHeader>
              <Heading size="md">Certificate Generation</Heading>
            </CardHeader>
            <CardBody>
              <SimpleGrid columns={{ base: 1, md: 2 }} spacing={{ base: 5, md: 6 }}>
                {/* Single Certificate */}
                <Box border="1px" borderColor={borderColor} borderRadius="lg" p={{ base: 3, md: 4 }}>
                  <Heading as="h3" size="sm" mb={3}>
                    Generate Single Certificate
                  </Heading>

                <Stack spacing={4}>
                  <Box>
                    <Text fontSize="sm" fontWeight="medium" mb={2}>
                      Select Pharmacy
                    </Text>
                    <Select
                      value={selectedPharmacy}
                      onChange={(e) => setSelectedPharmacy(e.target.value)}
                      placeholder="Choose a pharmacy..."
                    >
                      {eligiblePharmacies.map((pharmacy) => (
                        <option key={pharmacy._id} value={pharmacy._id}>
                          {pharmacy.name} - {pharmacy.address}
                        </option>
                      ))}
                    </Select>
                  </Box>

                  <Button
                    onClick={handleSingleGeneration}
                    isDisabled={generating || !selectedPharmacy}
                    colorScheme="blue"
                    isLoading={generating}
                    loadingText="Generating..."
                  >
                    Generate Certificate
                  </Button>
                </Stack>
              </Box>                {/* Bulk Generation */}
                <Box border="1px" borderColor={borderColor} borderRadius="lg" p={{ base: 3, md: 4 }}>
                  <Heading as="h3" size="sm" mb={3}>
                    Generate Bulk Certificates
                  </Heading>

                <Stack spacing={4}>
                  <Box p={3} bg="gray.50" borderRadius="lg">
                    <Text fontSize="sm" color="gray.600" mb={2}>
                      Generate certificates for all {eligiblePharmacies.length}{' '}
                      eligible pharmacies
                    </Text>
                    <Text fontSize="xs" color="gray.500">
                      This will create individual PDF certificates for each pharmacy
                      with no outstanding dues.
                    </Text>
                  </Box>

                  <Button
                    onClick={generateBulkCertificates}
                    isDisabled={generating || eligiblePharmacies.length === 0}
                    colorScheme="green"
                    isLoading={generating}
                    loadingText="Generating..."
                  >
                    {`Generate ${eligiblePharmacies.length} Certificates`}
                  </Button>
                </Stack>
              </Box>            </SimpleGrid>
          </CardBody>
        </Card>
          {/* Pharmacy List */}
        <Card bg={cardBg} shadow="md" w="100%" borderRadius="lg" overflow="hidden">          <CardBody px={{ base: 3, md: 4 }} py={4}>
            <Flex justify="space-between" align="center" mb={4} wrap="wrap" gap={2}>
              <Heading size="md">Pharmacy Status</Heading>

              <HStack spacing={4}>
                <Select
                  value={filterStatus}
                  onChange={(e) => setFilterStatus(e.target.value)}
                  size="sm"
                  width="auto"
                >
                  <option value="all">All Pharmacies</option>
                  <option value="eligible">Eligible Only</option>
                  <option value="ineligible">Ineligible Only</option>
                </Select>
              </HStack>
            </Flex>
              <Box overflowX="auto" width="100%" sx={{
              WebkitOverflowScrolling: "touch",
              scrollbarWidth: "thin",
              "&::-webkit-scrollbar": {
                height: "8px",
                backgroundColor: "transparent"
              },
              "&::-webkit-scrollbar-thumb": {
                backgroundColor: "gray.300",
                borderRadius: "8px"
              }
            }}>
              <Table variant="simple" size={{ base: "sm", md: "md" }} width="100%">
                <Thead>
                  <Tr>
                    <Th>Pharmacy</Th>
                    <Th>Address</Th>
                    <Th>Status</Th>
                    <Th>Action</Th>
                  </Tr>
                </Thead>
                <Tbody>
                  {filteredPharmaciesList.map((pharmacy) => {
                    const isEligible = eligiblePharmacies.some(
                      (p) => p._id === pharmacy._id
                    );
                    return (
                      <Tr key={pharmacy._id} _hover={{ bg: hoverBg }}>
                        <Td>
                          <Box>
                            <Text fontWeight="medium">
                              {pharmacy.name}
                            </Text>
                            <Text fontSize="sm" color="gray.500">
                              {pharmacy.registrationNumber || 'No reg. number'}
                            </Text>
                          </Box>
                        </Td>
                        <Td>
                          {pharmacy.address}
                        </Td>
                        <Td>
                          {isEligible ? (
                            <Badge colorScheme="green" borderRadius="full" px={2} py={1}>
                              Eligible
                            </Badge>
                          ) : (
                            <Badge colorScheme="red" borderRadius="full" px={2} py={1}>
                              Outstanding Dues
                            </Badge>
                          )}
                        </Td>
                        <Td>
                          {isEligible ? (
                            <Button
                              onClick={() => generateCertificatePDF(pharmacy)}
                              isDisabled={generating}
                              size="sm"
                              colorScheme="blue"
                              variant="link"
                              leftIcon={<Icon as={FaFilePdf} />}
                            >
                              Generate Certificate
                            </Button>
                          ) : (
                            <Text fontSize="sm" color="gray.400">
                              Not Eligible
                            </Text>
                          )}
                        </Td>
                      </Tr>
                    );                  })}
                </Tbody>
              </Table>
            </Box>
          </CardBody>
        </Card>
      </Container>
      </Flex>
    </DashboardLayout>
  );
};

export default ClearanceCertificateGeneration;
